// Code generated by pegomock. DO NOT EDIT.
// Source: awesomeProject (interfaces: SlackClient)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	slack "github.com/slack-go/slack"
	"reflect"
	"time"
)

type MockSlackClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockSlackClient(options ...pegomock.Option) *MockSlackClient {
	mock := &MockSlackClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockSlackClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockSlackClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockSlackClient) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSlackClient().")
	}
	params := []pegomock.Param{channelID}
	for _, param := range options {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PostMessage", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 string
	var ret2 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(string)
		}
		if result[2] != nil {
			ret2 = result[2].(error)
		}
	}
	return ret0, ret1, ret2
}

func (mock *MockSlackClient) VerifyWasCalledOnce() *VerifierMockSlackClient {
	return &VerifierMockSlackClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockSlackClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockSlackClient {
	return &VerifierMockSlackClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockSlackClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockSlackClient {
	return &VerifierMockSlackClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockSlackClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockSlackClient {
	return &VerifierMockSlackClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockSlackClient struct {
	mock                   *MockSlackClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockSlackClient) PostMessage(channelID string, options ...slack.MsgOption) *MockSlackClient_PostMessage_OngoingVerification {
	params := []pegomock.Param{channelID}
	for _, param := range options {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PostMessage", params, verifier.timeout)
	return &MockSlackClient_PostMessage_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockSlackClient_PostMessage_OngoingVerification struct {
	mock              *MockSlackClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockSlackClient_PostMessage_OngoingVerification) GetCapturedArguments() (string, []slack.MsgOption) {
	channelID, options := c.GetAllCapturedArguments()
	return channelID[len(channelID)-1], options[len(options)-1]
}

func (c *MockSlackClient_PostMessage_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 [][]slack.MsgOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([][]slack.MsgOption, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param1[u] = make([]slack.MsgOption, len(params)-1)
			for x := 1; x < len(params); x++ {
				if params[x][u] != nil {
					_param1[u][x-1] = params[x][u].(slack.MsgOption)
				}
			}
		}
	}
	return
}
